name: CI

on:
  pull_request:
    branches: 
      - develop

jobs:
 SwiftLint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: GitHub Action for SwiftLint
      uses: norio-nomura/action-swiftlint@3.2.1

 build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-12

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install and run 'bundle install'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          # runs 'bundle install' and caches installed gems automatically
          bundler-cache: true
      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Amplify
        run: npm install -g @aws-amplify/cli
      - name: Setup Amplify
        run: bash ./update_amplify.sh -a $AWS_ACCESS_KEY_ID -s $AWS_SECRET_ACCESS_KEY -i $APP_ID -e $AMPLIFY_DEV_ENV -t $FACEBOOK_APP_ID -r $FACEBOOK_APP_SECRET
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APP_ID: ${{ secrets.APP_ID }}
          AMPLIFY_DEV_ENV: ${{ secrets.AMPLIFY_DEV_ENV }}
          FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
          FACEBOOK_APP_SECRET: ${{ secrets.FACEBOOK_APP_SECRET }}
      - name: Setup .mapbox file with MAPBOX_DOWNLOAD_TOKEN
        run: echo $MAPBOX_DOWNLOAD_TOKEN >> ~/.mapbox
        env:
          MAPBOX_DOWNLOAD_TOKEN: ${{ secrets.MAPBOX_DOWNLOAD_TOKEN }}
      - name: Setup .netrc with MAPBOX_DOWNLOAD_TOKEN
        run: |
          echo 'machine api.mapbox.com' >> ~/.netrc
          echo 'login mapbox' >> ~/.netrc
          echo "password $MAPBOX_DOWNLOAD_TOKEN" >> ~/.netrc
          chmod 0600 ~/.netrc
        env:
          MAPBOX_DOWNLOAD_TOKEN: ${{ secrets.MAPBOX_DOWNLOAD_TOKEN }}
      - name: Install Swiftgen
        run: brew install swiftgen
      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with: 
          xcode-version: '14.0.1'
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
